# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----
#
# percona_bootstrapnode_ip.rb
#
#
# ---- original file header ----
#
# @summary
#       Querys puppetdb and searches for a percona cluster member in bootstrap mode
#
#
Puppet::Functions.create_function(:'percona::percona_bootstrapnode_ip') do
  # @param arguments
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :arguments
  end


  def default_impl(*arguments)
    

    raise(Puppet::ParseError, "percona_bootstrapnode_ip(): Wrong number of arguments " +
      "given (#{arguments.size} for 1)") if arguments.size != 1

      res_filter = [
        'and',
        ['=', 'type', 'Percona::Stubs::Bootstrapnode'],
        ['=', 'exported', true],
        ['=', 'tag', arguments[0]],
      ]

      qry_res = self.function_query_resources([false, res_filter])

      if qry_res.size > 0
        raise(Puppet::ParseError, "percona_bootstrapnode_ip(): Found #{qry_res.size} percona nodes in bootstrap mode for tag '#{arguments[0]}', expected only one.") if qry_res.size > 1

        if qry_res.is_a?(Hash)
          qry_res = qry_res.values[0][0]['parameters']
        else
          qry_res = qry_res[0]['parameters']
        end

        raise(Puppet::ParseError, "percona_bootstrapnode_ip(): Can not find parameter ip.") unless qry_res.has_key?('ip')

        return qry_res['ip']

      end
      return nil
  
  end
end
